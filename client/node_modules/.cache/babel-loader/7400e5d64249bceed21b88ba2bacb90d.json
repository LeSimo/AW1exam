{"ast":null,"code":"var _jsxFileName = \"/home/kali/Desktop/AW1/exam/client/src/App.js\";\nimport React, { useState, useEffect } from 'react';\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport API from './API/API'; //import {Redirect, Route,Link} from 'react-router-dom';\n//import {Switch} from 'react-router-dom';        //modified before it was react-router\n//import { withRouter } from 'react-router-dom';\n\nimport { BrowserRouter as Router, Route, Switch, Redirect } from 'react-router-dom';\nimport NavBar from './Components/NavBar';\nimport SideBar from './Components/SideBar';\nimport { AuthContext } from './auth/AuthContext';\nimport { Row, Col, Container } from 'react-bootstrap';\n\nclass App extends React.Component {\n  /*const [cars, setCars] = useState([]);\n  const [brands, setBrands] = useState([]);\n  const [categories, setCategories] = useState([]);\n  const [filters, setFilters] = useState({ activeBrands: [], activeCategories: [] });\n  const [loginStatus, setLoginStatus] = useState({ isLoggedIn: false, loginError: false, username: '', userId: '' });\n  const [rents, setRents] = useState([]);\n  const [funziona,setFunziona] = useState(false);\n   // Need to start with loading: false to check if user already is logged in\n  const [loading, setLoading] = useState(false);\n   // Error message received by an API call\n  const [errorMsg, setErrorMsg] = useState('');\n   const handleErrors = (errorObj) => {\n    if (errorObj) {\n      if (errorObj.status && errorObj.status === 401) {\n        // isLoggedIn false redirects to /cars\n        setTimeout(() => {\n          setLoginStatus({ isLoggedIn: false, loginError: false, user: loginStatus.user });\n          setErrorMsg('');\n        }, 2000);\n      }\n      const err0 = errorObj.errors[0];\n      const errorString = err0.param + ': ' + err0.msg;\n      setErrorMsg(errorString);\n      setLoading(false);\n    }\n  };\n   const loadInitialData = () => {\n    const promises = [API.getCars(), API.getBrands(), API.getCategories()];\n    Promise.all(promises).then(\n      ([cars, brands, categories]) => {\n        setCars(cars);\n        setBrands(brands);\n        setCategories(categories);    \n      }\n    ).catch(\n      (errorObj) => {\n        handleErrors(errorObj);\n      }\n    );\n  };\n   const loadLoggedData = () => {\n    const promise = API.getRents(loginStatus.userId);\n    Promise.resolve(promise).then((rents) => {\n      setRents(rents);\n    }).catch(\n      (errorObj) => {\n        handleErrors(errorObj);\n      }\n    );\n   }\n    // if user is not logged retrieve the public data (default)\n  // if user is logged retrieve the private and public data \n  useEffect(() => {\n    if (loginStatus.isLoggedIn) {\n      API.isAuthenticated().then((userInfo) => {\n        setLoginStatus({ isLoggedIn: true, username: userInfo.name, userId: userInfo.userID, loginError: loginStatus.loginError });\n        loadLoggedData();\n        //if (cars.length === 0 || brands.length === 0 || categories.length === 0)          //se per errore non sono stati caricati i dati iniziali\n        //loadInitialData();\n      }).catch((errorObj) => {\n        if (errorObj.status && errorObj.status === 401) {\n          // setting isLoggedIn to false redirects to /login\n          setLoginStatus({ isLoggedIn: false, loginError: false, username: loginStatus.username, userId: loginStatus.userId });\n          setLoading(false);\n          setErrorMsg('');\n        }\n      })\n    } else {\n      loadInitialData();\n    }\n  }, );\n   const cancelErrorMsg = () => {\n    setErrorMsg('');\n  }\n   // logout method\n  const userLogout = () => {\n    API.userLogout().then(\n      () => { setLoginStatus({ isLoggedIn: false, username: '', userId: '', loginError: loginStatus.loginError }) }\n    );\n  }\n   const setLoggedInUser = (user) => {\n    setLoginStatus({ isLoggedIn: true, username: user.name, userId: user.userID, loginError: false });\n    setLoading(true);\n    loadInitialData();\n  }\n   const deleteRent = (rent) => {\n    API.deleteRent(rent.invoice).then(() => {\n      API.getRents().then((rents) => setRents(rents))\n    }).catch(\n      (errorObj) => {\n        handleErrors(errorObj);\n      }\n    );\n  }\n   const addRent = (rent) => {\n    API.addRent(rent).then(() => {\n      API.getRents().then((rents) => setRents(rents))\n    }).catch(\n      (errorObj) => {\n        handleErrors(errorObj);\n      }\n    );\n  }\n  */\n  constructor(props) {\n    super(props);\n    this.state = {\n      brands: [],\n      cars: [],\n      categories: []\n    };\n  }\n\n  componentDidMount() {\n    API.getBrands().then(brands => this.setState({\n      brands: brands\n    }));\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(Router, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(Switch, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Route, {\n      path: \"/\",\n      render: props => {\n        /* if (loginStatus.isLoggedIn)\n           return <Redirect to='/' />  // da reindirizzare alla pagina del configuratore \n         else\n           return */\n\n        /*#__PURE__*/\n        React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Redirect, {\n          to: \"/cars\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 15\n          }\n        }), /*#__PURE__*/React.createElement(Container, {\n          fluid: true,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 15\n          }\n        }, /*#__PURE__*/React.createElement(NavBar, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 17\n          }\n        }), /*#__PURE__*/React.createElement(Row, {\n          className: \"vheight-100\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 17\n          }\n        }, /*#__PURE__*/React.createElement(Col, {\n          sm: 4,\n          className: \"below-nav\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 19\n          }\n        }, /*#__PURE__*/React.createElement(\"h5\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(\"strong\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 25\n          }\n        }, \"Public Tasks\")), /*#__PURE__*/React.createElement(SideBar\n        /*activeBrands ={filters.activeBrands} activeCategories ={filters.activeCategories}\n        brands={brands} categories={categories}*/\n        , {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 21\n          }\n        })))));\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/kali/Desktop/AW1/exam/client/src/App.js"],"names":["React","useState","useEffect","API","BrowserRouter","Router","Route","Switch","Redirect","NavBar","SideBar","AuthContext","Row","Col","Container","App","Component","constructor","props","state","brands","cars","categories","componentDidMount","getBrands","then","setState","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;AAEA,OAAO,WAAP;AACA,OAAOC,GAAP,MAAgB,WAAhB,C,CACA;AACA;AACA;;AACA,SAASC,aAAa,IAAIC,MAA1B,EAAkCC,KAAlC,EAAyCC,MAAzC,EAAiDC,QAAjD,QAAiE,kBAAjE;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,SAASC,WAAT,QAA4B,oBAA5B;AACA,SAASC,GAAT,EAAcC,GAAd,EAAmBC,SAAnB,QAAoC,iBAApC;;AAGA,MAAMC,GAAN,SAAkBf,KAAK,CAACgB,SAAxB,CAAkC;AAChC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsHFC,EAAAA,WAAW,CAACC,KAAD,EAAS;AAClB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AAACC,MAAAA,MAAM,EAAC,EAAR;AAAWC,MAAAA,IAAI,EAAC,EAAhB;AAAmBC,MAAAA,UAAU,EAAC;AAA9B,KAAb;AACD;;AAEDC,EAAAA,iBAAiB,GAAE;AACjBpB,IAAAA,GAAG,CAACqB,SAAJ,GAAgBC,IAAhB,CAAsBL,MAAD,IAAa,KAAKM,QAAL,CAAc;AAACN,MAAAA,MAAM,EAACA;AAAR,KAAd,CAAlC;AACD;;AAEDO,EAAAA,MAAM,GAAE;AACN,wBACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,GAAZ;AAAgB,MAAA,MAAM,EAAGT,KAAD,IAAW;AAClC;;;;;AAGY;AAAA,+DACP,oBAAC,QAAD;AAAU,UAAA,EAAE,EAAC,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADO,eAEP,oBAAC,SAAD;AAAW,UAAA,KAAK,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF,eAGE,oBAAC,GAAD;AAAK,UAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACE,oBAAC,GAAD;AAAK,UAAA,EAAE,EAAE,CAAT;AAAY,UAAA,SAAS,EAAC,WAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAJ,CADF,eAEE,oBAAC;AAAQ;;AAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAFF,CADF,CAHF,CAFO;AAeZ,OAnBD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAFF,CADF;AA+BD;;AAhKiC;;AAkKlC,eAAeH,GAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport API from './API/API'\n//import {Redirect, Route,Link} from 'react-router-dom';\n//import {Switch} from 'react-router-dom';        //modified before it was react-router\n//import { withRouter } from 'react-router-dom';\nimport { BrowserRouter as Router, Route, Switch, Redirect } from 'react-router-dom';\nimport NavBar from './Components/NavBar'\nimport SideBar from './Components/SideBar'\nimport { AuthContext } from './auth/AuthContext'\nimport { Row, Col, Container } from 'react-bootstrap'\n\n\nclass App extends React.Component {\n  /*const [cars, setCars] = useState([]);\n  const [brands, setBrands] = useState([]);\n  const [categories, setCategories] = useState([]);\n  const [filters, setFilters] = useState({ activeBrands: [], activeCategories: [] });\n  const [loginStatus, setLoginStatus] = useState({ isLoggedIn: false, loginError: false, username: '', userId: '' });\n  const [rents, setRents] = useState([]);\n  const [funziona,setFunziona] = useState(false);\n\n  // Need to start with loading: false to check if user already is logged in\n  const [loading, setLoading] = useState(false);\n\n  // Error message received by an API call\n  const [errorMsg, setErrorMsg] = useState('');\n\n  const handleErrors = (errorObj) => {\n    if (errorObj) {\n      if (errorObj.status && errorObj.status === 401) {\n        // isLoggedIn false redirects to /cars\n        setTimeout(() => {\n          setLoginStatus({ isLoggedIn: false, loginError: false, user: loginStatus.user });\n          setErrorMsg('');\n        }, 2000);\n      }\n      const err0 = errorObj.errors[0];\n      const errorString = err0.param + ': ' + err0.msg;\n      setErrorMsg(errorString);\n      setLoading(false);\n    }\n  };\n\n  const loadInitialData = () => {\n    const promises = [API.getCars(), API.getBrands(), API.getCategories()];\n    Promise.all(promises).then(\n      ([cars, brands, categories]) => {\n        setCars(cars);\n        setBrands(brands);\n        setCategories(categories);    \n      }\n    ).catch(\n      (errorObj) => {\n        handleErrors(errorObj);\n      }\n    );\n  };\n\n  const loadLoggedData = () => {\n    const promise = API.getRents(loginStatus.userId);\n    Promise.resolve(promise).then((rents) => {\n      setRents(rents);\n    }).catch(\n      (errorObj) => {\n        handleErrors(errorObj);\n      }\n    );\n\n  }\n\n\n  // if user is not logged retrieve the public data (default)\n  // if user is logged retrieve the private and public data \n  useEffect(() => {\n    if (loginStatus.isLoggedIn) {\n      API.isAuthenticated().then((userInfo) => {\n        setLoginStatus({ isLoggedIn: true, username: userInfo.name, userId: userInfo.userID, loginError: loginStatus.loginError });\n        loadLoggedData();\n        //if (cars.length === 0 || brands.length === 0 || categories.length === 0)          //se per errore non sono stati caricati i dati iniziali\n        //loadInitialData();\n      }).catch((errorObj) => {\n        if (errorObj.status && errorObj.status === 401) {\n          // setting isLoggedIn to false redirects to /login\n          setLoginStatus({ isLoggedIn: false, loginError: false, username: loginStatus.username, userId: loginStatus.userId });\n          setLoading(false);\n          setErrorMsg('');\n        }\n      })\n    } else {\n      loadInitialData();\n    }\n  }, );\n\n  const cancelErrorMsg = () => {\n    setErrorMsg('');\n  }\n\n  // logout method\n  const userLogout = () => {\n    API.userLogout().then(\n      () => { setLoginStatus({ isLoggedIn: false, username: '', userId: '', loginError: loginStatus.loginError }) }\n    );\n  }\n\n  const setLoggedInUser = (user) => {\n    setLoginStatus({ isLoggedIn: true, username: user.name, userId: user.userID, loginError: false });\n    setLoading(true);\n    loadInitialData();\n  }\n\n  const deleteRent = (rent) => {\n    API.deleteRent(rent.invoice).then(() => {\n      API.getRents().then((rents) => setRents(rents))\n    }).catch(\n      (errorObj) => {\n        handleErrors(errorObj);\n      }\n    );\n  }\n\n  const addRent = (rent) => {\n    API.addRent(rent).then(() => {\n      API.getRents().then((rents) => setRents(rents))\n    }).catch(\n      (errorObj) => {\n        handleErrors(errorObj);\n      }\n    );\n  }\n*/\n\nconstructor(props)  {\n  super(props);\n  this.state = {brands:[],cars:[],categories:[]};\n}\n\ncomponentDidMount(){\n  API.getBrands().then((brands) => (this.setState({brands:brands})))\n}\n\nrender(){\n  return (\n    <Router>\n\n      <Switch>\n        <Route path='/' render={(props) => {\n         /* if (loginStatus.isLoggedIn)\n            return <Redirect to='/' />  // da reindirizzare alla pagina del configuratore \n          else\n            return */<> \n              <Redirect to='/cars' />\n              <Container fluid>\n                <NavBar />\n                \n                <Row className=\"vheight-100\">\n                  <Col sm={4} className=\"below-nav\">\n                    <h5><strong>Public Tasks</strong></h5>\n                    <SideBar /*activeBrands ={filters.activeBrands} activeCategories ={filters.activeCategories}\n                    brands={brands} categories={categories}*//>\n                  </Col>\n                </Row>\n              </Container>\n\n            </>\n        }}>\n\n        </Route>\n      </Switch>\n\n\n    </Router>\n  );\n}\n}\nexport default App;\n"]},"metadata":{},"sourceType":"module"}