{"ast":null,"code":"var _jsxFileName = \"/home/kali/Desktop/AW1/exam/client/src/App.js\";\nimport React, { useState, useEffect } from 'react';\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport API from './API/API'; //import {Redirect, Route,Link} from 'react-router-dom';\n//import {Switch} from 'react-router-dom';        //modified before it was react-router\n//import { withRouter } from 'react-router-dom';\n\nimport { BrowserRouter as Router, Route, Switch, Redirect } from 'react-router-dom';\nimport NavBar from './Components/NavBar';\nimport SideBar from './Components/SideBar';\nimport CarList from './Components/CarList';\nimport LoginForm from './Components/LoginForm';\nimport { AuthContext } from './auth/AuthContext';\nimport { Row, Col, Container, Navbar } from 'react-bootstrap';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.loadIniatialData = () => {\n      API.getBrands().then(b => {\n        this.setState({\n          brands: b\n        });\n      });\n      API.getCars().then(c => {\n        this.setState({\n          cars: c\n        });\n      });\n      API.getCategories().then(c => {\n        this.setState({\n          categories: c\n        });\n      });\n    };\n\n    this.logout = () => {\n      this.setState({\n        isLogged: true\n      });\n      API.userLogout().then(() => {\n        this.setState({\n          authUser: null,\n          authErr: null,\n          isLogged: false,\n          rents: []\n        });\n        API.getCars().catch(errorObj => {\n          this.handleErrors(errorObj);\n        });\n      });\n      this.setState({\n        isLogged: false\n      });\n    };\n\n    this.login = (username, password) => {\n      API.userLogin(username, password).then(user => {\n        this.setState({\n          isLogged: true\n        });\n        API.getRents().then(rents => {\n          this.setState({\n            rents: rents,\n            authUser: user,\n            authErr: null,\n            isLogged: true\n          });\n          this.props.history.push(\"/configurator\"); //=> Rimanda al configuratore\n        }).catch(errorObj => {\n          this.handleErrors(errorObj);\n        });\n      }).catch(errorObj => {\n        const err0 = errorObj.errors[0];\n        this.setState({\n          authErr: err0\n        });\n      });\n    };\n\n    this.addOrRemoveBrandsFilters = brand => {\n      let brandsFilters = this.state.brandsFilters;\n\n      if (brandsFilters.includes(brand)) {\n        brandsFilters = brandsFilters.filter(b => b !== brand);\n      } else {\n        brandsFilters.push(brand);\n      }\n\n      this.setState({\n        brandsFilters: brandsFilters\n      });\n    };\n\n    this.addOrRemoveCategoriesFilters = category => {\n      let categoriesFilters = this.state.categoriesFilters;\n\n      if (categoriesFilters.includes(category)) {\n        categoriesFilters = categoriesFilters.filter(c => c !== category);\n      } else {\n        categoriesFilters.push(category);\n      }\n\n      this.setState({\n        categoriesFilters: categoriesFilters\n      });\n    };\n\n    this.state = {\n      brands: [],\n      cars: [],\n      categories: [],\n      rents: [],\n      isLogged: false,\n      loading: false,\n      errorMsg: '',\n      brandsFilters: [],\n      categoriesFilters: [],\n      authUser: ''\n    };\n  }\n\n  handleErrors(err) {\n    if (err) {\n      if (err.status && err.status === 401) {\n        this.setState({\n          authErr: err.errorObj\n        });\n        this.props.history.push(\"/cars\");\n      }\n    }\n  } // Add a logout method\n\n\n  componentDidMount() {\n    if (this.state.isLogged) {} else {\n      this.setState({\n        loading: true\n      });\n      this.loadIniatialData();\n      this.setState({\n        loading: false\n      });\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Router, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Switch, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Route, {\n      path: \"/cars\",\n      render: props => {\n        if (this.state.isLogged) return /*#__PURE__*/React.createElement(Redirect, {\n          to: \"/configurator\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 22\n          }\n        });else {\n          return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(NavBar, {\n            isLogged: this.state.isLogged,\n            authUser: this.state.authUser,\n            logoutMethod: this.logout,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 140,\n              columnNumber: 17\n            }\n          }), /*#__PURE__*/React.createElement(Container, {\n            fluid: true,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 142,\n              columnNumber: 17\n            }\n          }, /*#__PURE__*/React.createElement(Row, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 143,\n              columnNumber: 19\n            }\n          }, /*#__PURE__*/React.createElement(SideBar, {\n            brands: this.state.brands,\n            categories: this.state.categories,\n            brandsFilters: this.state.brandsFilters,\n            categoriesFilters: this.state.categoriesFilters,\n            addOrRemoveBrandsFilters: this.addOrRemoveBrandsFilters,\n            addOrRemoveCategoriesFilters: this.addOrRemoveCategoriesFilters,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 144,\n              columnNumber: 21\n            }\n          }), /*#__PURE__*/React.createElement(CarList, {\n            cars: this.state.cars,\n            brandsFilters: this.state.brandsFilters,\n            categoriesFilters: this.state.categoriesFilters,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 147,\n              columnNumber: 21\n            }\n          }))));\n        }\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: \"/login\",\n      render: props => {\n        return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n          className: \"vheight-100\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 15\n          }\n        }, /*#__PURE__*/React.createElement(Col, {\n          md: 4,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 17\n          }\n        }), /*#__PURE__*/React.createElement(Col, {\n          md: 4,\n          className: \"below-nav\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 17\n          }\n        }, /*#__PURE__*/React.createElement(LoginForm, {\n          loginMethod: this.login,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 19\n          }\n        }))));\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: \"/\",\n      render: props => {\n        if (this.state.isLogged) return /*#__PURE__*/React.createElement(Redirect, {\n          to: \"/configurator\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 22\n          }\n        });else {\n          return /*#__PURE__*/React.createElement(Redirect, {\n            to: \"/cars\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 174,\n              columnNumber: 22\n            }\n          });\n        }\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 11\n      }\n    }))));\n  }\n\n}\n\nexport default App;\n/*\nfunction App(props) {\n  const [cars, setCars] = useState([]);\n  const [brands, setBrands] = useState([]);\n  const [categories, setCategories] = useState([]);\n  const [filters, setFilters] = useState({ activeBrands: [], activeCategories: [] });\n  const [loginStatus, setLoginStatus] = useState({ isLoggedIn: false, loginError: false, username: '', userId: '' });\n  const [rents, setRents] = useState([]);\n  const [funziona,setFunziona] = useState(false);\n\n  // Need to start with loading: false to check if user already is logged in\n  const [loading, setLoading] = useState(false);\n\n  // Error message received by an API call\n  const [errorMsg, setErrorMsg] = useState('');\n\n  const handleErrors = (errorObj) => {\n    if (errorObj) {\n      if (errorObj.status && errorObj.status === 401) {\n        // isLoggedIn false redirects to /cars\n        setTimeout(() => {\n          setLoginStatus({ isLoggedIn: false, loginError: false, user: loginStatus.user });\n          setErrorMsg('');\n        }, 2000);\n      }\n      const err0 = errorObj.errors[0];\n      const errorString = err0.param + ': ' + err0.msg;\n      setErrorMsg(errorString);\n      setLoading(false);\n    }\n  };\n\n  const loadInitialData = () => {\n    const promises = [API.getCars(), API.getBrands(), API.getCategories()];\n    Promise.all(promises).then(\n      ([c, b, ca]) => {\n\n        setCars(c);\n        setBrands(b);\n        setCategories(ca);\n        setLoading(false);\n      }\n    ).catch(\n      (errorObj) => {\n        handleErrors(errorObj);\n      }\n    );\n  };\n\n  const loadLoggedData = () => {\n    const promise = API.getRents(loginStatus.userId);\n    Promise.resolve(promise).then((rents) => {\n      setRents(rents);\n    }).catch(\n      (errorObj) => {\n        handleErrors(errorObj);\n      }\n    );\n\n  }\n\n\n  // if user is not logged retrieve the public data (default)\n  // if user is logged retrieve the private and public data\n  useEffect(() => {\n    if (loginStatus.isLoggedIn) {\n      API.isAuthenticated().then((userInfo) => {\n        setLoginStatus({ isLoggedIn: true, username: userInfo.name, userId: userInfo.userID, loginError: loginStatus.loginError });\n        loadLoggedData();\n        //if (cars.length === 0 || brands.length === 0 || categories.length === 0)          //se per errore non sono stati caricati i dati iniziali\n        //loadInitialData();\n      }).catch((errorObj) => {\n        if (errorObj.status && errorObj.status === 401) {\n          // setting isLoggedIn to false redirects to /login\n          setLoginStatus({ isLoggedIn: false, loginError: false, username: loginStatus.username, userId: loginStatus.userId });\n          setLoading(false);\n          setErrorMsg('');\n        }\n      })\n    } else {\n      setLoading(true)\n      loadInitialData();\n\n      console.log(brands)\n\n    }\n  },[brands,cars,categories] );\n\n  const cancelErrorMsg = () => {\n    setErrorMsg('');\n  }\n\n  // logout method\n  const userLogout = () => {\n    API.userLogout().then(\n      () => { setLoginStatus({ isLoggedIn: false, username: '', userId: '', loginError: loginStatus.loginError }) }\n    );\n  }\n\n  const setLoggedInUser = (user) => {\n    setLoginStatus({ isLoggedIn: true, username: user.name, userId: user.userID, loginError: false });\n    setLoading(true);\n    loadInitialData();\n  }\n\n  const deleteRent = (rent) => {\n    API.deleteRent(rent.invoice).then(() => {\n      API.getRents().then((rents) => setRents(rents))\n    }).catch(\n      (errorObj) => {\n        handleErrors(errorObj);\n      }\n    );\n  }\n\n  const addRent = (rent) => {\n    API.addRent(rent).then(() => {\n      API.getRents().then((rents) => setRents(rents))\n    }).catch(\n      (errorObj) => {\n        handleErrors(errorObj);\n      }\n    );\n  }\n\n\n  return (\n    <Router>\n\n      <Switch>\n        <Route path='/' render={(props) => {\n          if (loginStatus.isLoggedIn)\n            return <Redirect to='/' />  // da reindirizzare alla pagina del configuratore\n          else\n            return <>\n              <Redirect to='/cars' />\n              <Container fluid>\n                <NavBar />\n\n                <Row className=\"vheight-100\">\n                  <Col sm={4} className=\"below-nav\">\n                    <h5><strong>Public Tasks</strong></h5>\n                    <SideBar activeBrands ={filters.activeBrands} activeCategories ={filters.activeCategories}\n                    brands={brands} categories={categories}/>\n                  </Col>\n                </Row>\n              </Container>\n\n            </>\n        }}>\n\n        </Route>\n      </Switch>\n\n\n    </Router>\n  );\n}\n\n\n*/","map":{"version":3,"sources":["/home/kali/Desktop/AW1/exam/client/src/App.js"],"names":["React","useState","useEffect","API","BrowserRouter","Router","Route","Switch","Redirect","NavBar","SideBar","CarList","LoginForm","AuthContext","Row","Col","Container","Navbar","App","Component","constructor","props","loadIniatialData","getBrands","then","b","setState","brands","getCars","c","cars","getCategories","categories","logout","isLogged","userLogout","authUser","authErr","rents","catch","errorObj","handleErrors","login","username","password","userLogin","user","getRents","history","push","err0","errors","addOrRemoveBrandsFilters","brand","brandsFilters","state","includes","filter","addOrRemoveCategoriesFilters","category","categoriesFilters","loading","errorMsg","err","status","componentDidMount","render"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport API from './API/API'\n//import {Redirect, Route,Link} from 'react-router-dom';\n//import {Switch} from 'react-router-dom';        //modified before it was react-router\n//import { withRouter } from 'react-router-dom';\nimport { BrowserRouter as Router, Route, Switch, Redirect } from 'react-router-dom';\nimport NavBar from './Components/NavBar'\nimport SideBar from './Components/SideBar'\nimport CarList from './Components/CarList'\nimport LoginForm from './Components/LoginForm'\nimport { AuthContext } from './auth/AuthContext'\nimport { Row, Col, Container, Navbar } from 'react-bootstrap'\n\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      brands: [], cars: [], categories: [], rents: [], isLogged: false,\n      loading: false, errorMsg: '', brandsFilters: [], categoriesFilters: [],\n      authUser:''\n    };\n  }\n\n  loadIniatialData = () => {\n    API.getBrands().then(\n      (b) => {\n        this.setState({ brands: b })\n\n      })\n\n    API.getCars().then(\n      (c) => {\n        this.setState({ cars: c })\n\n      })\n    API.getCategories().then(\n      (c) => {\n        this.setState({ categories: c })\n      })\n  }\n\n  handleErrors(err) {\n    if (err) {\n      if (err.status && err.status === 401) {\n        this.setState({ authErr: err.errorObj });\n        this.props.history.push(\"/cars\");\n      }\n    }\n  }\n\n\n  // Add a logout method\n  logout = () => {\n    this.setState({ isLogged: true })\n    API.userLogout().then(() => {\n      this.setState({ authUser: null, authErr: null, isLogged: false, rents: [] });\n      API.getCars().catch((errorObj) => { this.handleErrors(errorObj) });\n    });\n    this.setState({ isLogged: false })\n\n  }\n\n\n  // Login method\n  login = (username, password) => {\n    API.userLogin(username, password).then(\n      (user) => {\n        this.setState({isLogged:true})\n        API.getRents()\n          .then((rents) => {\n            this.setState({ rents: rents, authUser: user, authErr: null, isLogged: true });\n            this.props.history.push(\"/configurator\"); //=> Rimanda al configuratore\n          })\n          .catch((errorObj) => {\n            this.handleErrors(errorObj);\n          });\n      }\n    ).catch(\n      (errorObj) => {\n        const err0 = errorObj.errors[0];\n        this.setState({ authErr: err0 });\n      }\n    );\n\n  }\n\n  componentDidMount() {\n    if (this.state.isLogged) {\n\n    } else {\n      this.setState({ loading: true })\n      this.loadIniatialData();\n      this.setState({ loading: false });\n\n    }\n\n  }\n\n  addOrRemoveBrandsFilters = (brand) => {\n    let brandsFilters = this.state.brandsFilters;\n    if (brandsFilters.includes(brand)) {\n      brandsFilters = brandsFilters.filter((b) => b !== brand)\n    }\n    else {\n      brandsFilters.push(brand);\n    }\n    this.setState({ brandsFilters: brandsFilters })\n  }\n\n  addOrRemoveCategoriesFilters = (category) => {\n    let categoriesFilters = this.state.categoriesFilters;\n    if (categoriesFilters.includes(category)) {\n      categoriesFilters = categoriesFilters.filter((c) => c !== category)\n    }\n    else {\n      categoriesFilters.push(category);\n    }\n    this.setState({ categoriesFilters: categoriesFilters })\n  }\n\n\n\n\n  render() {\n    return <>\n      <Router>\n\n\n\n        <Switch>\n          <Route path='/cars' render={(props) => {\n            if (this.state.isLogged)\n              return <Redirect to='/configurator' />;\n            else {\n              return <>\n                <NavBar isLogged={this.state.isLogged} authUser={this.state.authUser}\n                  logoutMethod={this.logout} />\n                <Container fluid>\n                  <Row>\n                    <SideBar brands={this.state.brands} categories={this.state.categories}\n                      brandsFilters={this.state.brandsFilters} categoriesFilters={this.state.categoriesFilters}\n                      addOrRemoveBrandsFilters={this.addOrRemoveBrandsFilters} addOrRemoveCategoriesFilters={this.addOrRemoveCategoriesFilters} />\n                    <CarList cars={this.state.cars} brandsFilters={this.state.brandsFilters} categoriesFilters={this.state.categoriesFilters} />\n                  </Row>\n                </Container>\n              </>\n\n            }\n          }} />\n\n          <Route path='/login' render={(props) => {\n            return <>\n              <Row className=\"vheight-100\">\n                <Col md={4}></Col>\n                <Col md={4} className=\"below-nav\">\n                  <LoginForm loginMethod={this.login} />\n                </Col>\n              </Row>\n            </>\n\n          }}>\n          </Route>\n\n\n\n          <Route path='/' render={(props) => {\n            if (this.state.isLogged)\n              return <Redirect to='/configurator' />;\n            else {\n              return <Redirect to='/cars' />\n            }\n          }}>\n          </Route>\n\n\n        </Switch>\n\n\n      </Router>\n\n    </>\n  }\n\n}\n\nexport default App;\n\n\n\n/*\nfunction App(props) {\n  const [cars, setCars] = useState([]);\n  const [brands, setBrands] = useState([]);\n  const [categories, setCategories] = useState([]);\n  const [filters, setFilters] = useState({ activeBrands: [], activeCategories: [] });\n  const [loginStatus, setLoginStatus] = useState({ isLoggedIn: false, loginError: false, username: '', userId: '' });\n  const [rents, setRents] = useState([]);\n  const [funziona,setFunziona] = useState(false);\n\n  // Need to start with loading: false to check if user already is logged in\n  const [loading, setLoading] = useState(false);\n\n  // Error message received by an API call\n  const [errorMsg, setErrorMsg] = useState('');\n\n  const handleErrors = (errorObj) => {\n    if (errorObj) {\n      if (errorObj.status && errorObj.status === 401) {\n        // isLoggedIn false redirects to /cars\n        setTimeout(() => {\n          setLoginStatus({ isLoggedIn: false, loginError: false, user: loginStatus.user });\n          setErrorMsg('');\n        }, 2000);\n      }\n      const err0 = errorObj.errors[0];\n      const errorString = err0.param + ': ' + err0.msg;\n      setErrorMsg(errorString);\n      setLoading(false);\n    }\n  };\n\n  const loadInitialData = () => {\n    const promises = [API.getCars(), API.getBrands(), API.getCategories()];\n    Promise.all(promises).then(\n      ([c, b, ca]) => {\n\n        setCars(c);\n        setBrands(b);\n        setCategories(ca);\n        setLoading(false);\n      }\n    ).catch(\n      (errorObj) => {\n        handleErrors(errorObj);\n      }\n    );\n  };\n\n  const loadLoggedData = () => {\n    const promise = API.getRents(loginStatus.userId);\n    Promise.resolve(promise).then((rents) => {\n      setRents(rents);\n    }).catch(\n      (errorObj) => {\n        handleErrors(errorObj);\n      }\n    );\n\n  }\n\n\n  // if user is not logged retrieve the public data (default)\n  // if user is logged retrieve the private and public data\n  useEffect(() => {\n    if (loginStatus.isLoggedIn) {\n      API.isAuthenticated().then((userInfo) => {\n        setLoginStatus({ isLoggedIn: true, username: userInfo.name, userId: userInfo.userID, loginError: loginStatus.loginError });\n        loadLoggedData();\n        //if (cars.length === 0 || brands.length === 0 || categories.length === 0)          //se per errore non sono stati caricati i dati iniziali\n        //loadInitialData();\n      }).catch((errorObj) => {\n        if (errorObj.status && errorObj.status === 401) {\n          // setting isLoggedIn to false redirects to /login\n          setLoginStatus({ isLoggedIn: false, loginError: false, username: loginStatus.username, userId: loginStatus.userId });\n          setLoading(false);\n          setErrorMsg('');\n        }\n      })\n    } else {\n      setLoading(true)\n      loadInitialData();\n\n      console.log(brands)\n\n    }\n  },[brands,cars,categories] );\n\n  const cancelErrorMsg = () => {\n    setErrorMsg('');\n  }\n\n  // logout method\n  const userLogout = () => {\n    API.userLogout().then(\n      () => { setLoginStatus({ isLoggedIn: false, username: '', userId: '', loginError: loginStatus.loginError }) }\n    );\n  }\n\n  const setLoggedInUser = (user) => {\n    setLoginStatus({ isLoggedIn: true, username: user.name, userId: user.userID, loginError: false });\n    setLoading(true);\n    loadInitialData();\n  }\n\n  const deleteRent = (rent) => {\n    API.deleteRent(rent.invoice).then(() => {\n      API.getRents().then((rents) => setRents(rents))\n    }).catch(\n      (errorObj) => {\n        handleErrors(errorObj);\n      }\n    );\n  }\n\n  const addRent = (rent) => {\n    API.addRent(rent).then(() => {\n      API.getRents().then((rents) => setRents(rents))\n    }).catch(\n      (errorObj) => {\n        handleErrors(errorObj);\n      }\n    );\n  }\n\n\n  return (\n    <Router>\n\n      <Switch>\n        <Route path='/' render={(props) => {\n          if (loginStatus.isLoggedIn)\n            return <Redirect to='/' />  // da reindirizzare alla pagina del configuratore\n          else\n            return <>\n              <Redirect to='/cars' />\n              <Container fluid>\n                <NavBar />\n\n                <Row className=\"vheight-100\">\n                  <Col sm={4} className=\"below-nav\">\n                    <h5><strong>Public Tasks</strong></h5>\n                    <SideBar activeBrands ={filters.activeBrands} activeCategories ={filters.activeCategories}\n                    brands={brands} categories={categories}/>\n                  </Col>\n                </Row>\n              </Container>\n\n            </>\n        }}>\n\n        </Route>\n      </Switch>\n\n\n    </Router>\n  );\n}\n\n\n*/"]},"metadata":{},"sourceType":"module"}