{"ast":null,"code":"const Rent = require('./rent');\n\nconst Car = require('./car');\n\nconst baseURL = '/api';\n\nasync function isAuthenticated() {\n  let url = '/user';\n  const response = await fetch(baseURL + url);\n  const userJson = await response.json();\n  if (response.ok) return userJson;else {\n    let err = {\n      status: response.status,\n      errObj: userJson\n    };\n    throw err; //An object with the error coming from the server \n  }\n}\n\nasync function getCars() {\n  let url = '/cars';\n  const response = await fetch(baseURL + url);\n  const carsJson = await response.json();\n  return carsJson.map(c => new Car(c.id, c.model, c.brand, c.category, c.plate));\n}\n\nasync function getBrands() {\n  let url = '/brands';\n  const response = await fetch(baseURL + url);\n  const brandsJson = await response.json();\n  return brandsJson.map(b => b.brand);\n}\n\nasync function getCategories() {\n  let url = '/categories';\n  const response = await fetch(baseURL + url);\n  const categoriesJson = await response.json();\n  return categoriesJson.map(c => c.category);\n}\n\nasync function getCarById(carId) {\n  let url = '/cars/' + carId;\n  const response = await fetch(baseURL + url);\n  const carJson = await response.json();\n  if (response.ok) return carJson;\n}\n\nasync function getRents(userID) {\n  let url = '/rents/' + userID;\n  const response = await fetch(baseURL + url);\n  const rentsJson = await response.json();\n\n  if (response.ok) {\n    return rentsJson.map(r => new Rent(r.CarId, r.UserId, r.cost, r.StartDate, r.EndDate, r.invoice));\n  }\n}\n\nasync function deleteRent(rentInvoice) {\n  return new Promise((resolve, reject) => {\n    fetch(baseURL + '/rents/' + rentInvoice, {\n      method: 'DELETE'\n    }).then(response => {\n      if (response.ok) {\n        resolve(null);\n      } else {\n        // analyze the cause of error\n        response.json().then(obj => {\n          reject(obj);\n        }) //error msg in the response body\n        .catch(err => {\n          reject({\n            errors: [{\n              param: \"Server\",\n              msg: \"Cannot parse server response\"\n            }]\n          });\n        });\n      }\n    }).catch(err => {\n      reject({\n        errors: [{\n          param: \"Server\",\n          msg: \"Cannot communicate\"\n        }]\n      });\n    });\n  });\n}\n\nasync function addRent(rent) {\n  return new Promise((resolve, reject) => {\n    fetch(baseURL + '/rents', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(rent)\n    }).then(response => {\n      if (response.ok) {\n        resolve(null);\n      } else {\n        //analyze the cause of error\n        response.json().then(obj => {\n          reject(obj);\n        }) //error message in the response body\n        .catch(err => {\n          reject({\n            errors: [{\n              param: \"Application\",\n              masg: \"Cannot parse server response\"\n            }]\n          });\n        });\n      }\n    }).catch(err => {\n      reject({\n        errors: [{\n          param: \"Server\",\n          msg: \"Cannot communicate\"\n        }]\n      });\n    });\n  });\n}\n\nasync function userLogin(username, password) {\n  return new Promise((resolve, reject) => {\n    fetch(baseURL + '/login', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        username: username,\n        password: password\n      })\n    }).then(response => {\n      if (response.ok) {\n        response.json().then(user => {\n          resolve(user);\n        });\n      } else {\n        //analyze the cause of error\n        response.json().then(obj => {\n          reject(obj);\n        }) //error message in the response body\n        .catch(err => {\n          reject({\n            errors: [{\n              param: \"Application\",\n              masg: \"Cannot parse server response\"\n            }]\n          });\n        });\n      }\n    }).catch(err => {\n      reject({\n        errors: [{\n          param: \"Server\",\n          msg: \"Cannot communicate\"\n        }]\n      });\n    });\n  });\n}\n\nasync function userLogout() {\n  return new Promise((resolve, reject) => {\n    fetch(baseURL + '/logout', {\n      method: 'POST'\n    }).then(response => {\n      if (response.ok) {\n        resolve(null);\n      } else {\n        //analyze the cause of error\n        response.json().then(obj => {\n          reject(obj);\n        }) //error message in the response body\n        .catch(err => {\n          reject({\n            errors: [{\n              param: \"Application\",\n              masg: \"Cannot parse server response\"\n            }]\n          });\n        });\n      }\n    });\n  });\n} //API to export\n\n\nconst API = {\n  isAuthenticated,\n  getBrands,\n  getCars,\n  getCategories,\n  getRents,\n  addRent,\n  deleteRent,\n  userLogin,\n  userLogout\n};\nexport default API;","map":{"version":3,"sources":["/home/kali/Desktop/AW1/exam/client/src/API/API.js"],"names":["Rent","require","Car","baseURL","isAuthenticated","url","response","fetch","userJson","json","ok","err","status","errObj","getCars","carsJson","map","c","id","model","brand","category","plate","getBrands","brandsJson","b","getCategories","categoriesJson","getCarById","carId","carJson","getRents","userID","rentsJson","r","CarId","UserId","cost","StartDate","EndDate","invoice","deleteRent","rentInvoice","Promise","resolve","reject","method","then","obj","catch","errors","param","msg","addRent","rent","headers","body","JSON","stringify","masg","userLogin","username","password","user","userLogout","API"],"mappings":"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","sourcesContent":["\nconst Rent = require('./rent')\nconst Car = require('./car')\nconst baseURL = '/api';\n\n\n\nasync function isAuthenticated(){\n    let url = '/user';\n    const response = await fetch(baseURL+url);\n    const userJson = await response.json();\n    if(response.ok)\n        return userJson;\n    else{\n        let err = {status:response.status,errObj:userJson};\n        throw err;      //An object with the error coming from the server \n    }\n}\n\nasync function getCars(){\n    let url = '/cars';\n    const response = await fetch(baseURL+url);\n    const carsJson = await response.json();  \n        return carsJson.map((c) => new Car(c.id,c.model,c.brand,c.category,c.plate));\n    \n}\n\nasync function getBrands(){\n    let url = '/brands';\n    const response = await fetch(baseURL + url);\n    const brandsJson = await response.json();  \n        return brandsJson.map((b) => b.brand) \n    \n}\n\n\nasync function getCategories(){\n    let url = '/categories';\n    const response = await fetch(baseURL+url);\n    const categoriesJson = await response.json();\n        return categoriesJson.map((c) => c.category);\n    \n}\n\nasync function getCarById(carId){\n    let url = '/cars/'+carId;\n    const response = await fetch(baseURL+url);\n    const carJson = await response.json();\n    if(response.ok)\n        return carJson;\n}\n\n\nasync function getRents(userID){\n    let url = '/rents/'+userID;\n    const response = await fetch(baseURL+url);\n    const rentsJson = await response.json();\n    if(response.ok){\n        return rentsJson.map((r) => new Rent(r.CarId,r.UserId,r.cost,r.StartDate,r.EndDate,r.invoice));\n    }\n}\n\nasync function deleteRent(rentInvoice){\n    return new Promise ((resolve,reject) => {\n        fetch(baseURL+'/rents/'+rentInvoice,{\n            method : 'DELETE'\n        }).then((response) => {\n            if(response.ok){\n                resolve(null);\n            } else {\n                // analyze the cause of error\n                response.json()\n                .then((obj) => {reject(obj)})  //error msg in the response body\n                .catch((err) => {reject({errors:[{param :\"Server\",msg: \"Cannot parse server response\"}] }) });\n            }\n        }).catch((err) => {reject ({errors: [{param: \"Server\",msg: \"Cannot communicate\"}] }) });\n    })\n}\n\n\nasync function addRent(rent){\n    return new Promise((resolve,reject) => {\n        fetch(baseURL+'/rents',{\n            method : 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(rent)\n        }).then((response) => {\n            if(response.ok){\n                resolve(null);\n            } else {\n                //analyze the cause of error\n                response.json()\n                .then((obj) => {reject(obj)})       //error message in the response body\n                .catch((err) => {reject({ errors : [{param :\"Application\", masg:\"Cannot parse server response\"}] }) });\n            }\n        }).catch((err) => {reject({ errors : [{param: \"Server\",msg:\"Cannot communicate\"}] }) });\n    })\n}\n\n\nasync function userLogin(username,password){\n    return new Promise ((resolve,reject) => {\n        fetch(baseURL + '/login',{\n            method: 'POST',\n            headers: {\n                'Content-Type' : 'application/json',\n            },\n            body: JSON.stringify({username: username, password: password}),\n        }).then((response) => {\n            if(response.ok){\n                response.json().then((user) => {\n                    resolve(user);\n                });\n            }else {\n                //analyze the cause of error\n                response.json()\n                .then((obj) => {reject(obj)})       //error message in the response body\n                .catch((err) => {reject({ errors : [{param :\"Application\", masg:\"Cannot parse server response\"}] }) });\n            }\n        }).catch((err) => {reject({ errors : [{param: \"Server\",msg:\"Cannot communicate\"}] }) });\n    })\n}\n\n\nasync function userLogout(){\n    return new Promise((resolve,reject) => {\n        fetch(baseURL+'/logout',{\n            method: 'POST',\n        }).then((response) => {\n            if(response.ok){\n                resolve(null);\n            } else {\n                //analyze the cause of error\n                response.json()\n                .then((obj) => {reject(obj)})       //error message in the response body\n                .catch((err) => {reject({ errors : [{param :\"Application\", masg:\"Cannot parse server response\"}] }) });\n            }\n        })\n    })\n}\n\n//API to export\nconst API = {isAuthenticated,getBrands,getCars,getCategories,getRents,addRent,deleteRent,userLogin,userLogout};\nexport default API;"]},"metadata":{},"sourceType":"module"}