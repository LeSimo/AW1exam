{"ast":null,"code":"import React, { useState, useEffect } from 'react';\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport API from './API/API'; //import {Redirect, Route,Link} from 'react-router-dom';\n//import {Switch} from 'react-router-dom';        //modified before it was react-router\n//import { withRouter } from 'react-router-dom';\n\nimport { BrowserRouter as Router, Route, Switch, Redirect } from 'react-router-dom';\nimport NavBar from './Components/NavBar';\nimport SideBar from './Components/SideBar';\nimport { AuthContext } from './auth/AuthContext';\nimport { Row, Col, Container } from 'react-bootstrap';\n/*\nfunction App(props) {\n  const [cars, setCars] = useState([]);\n  const [brands, setBrands] = useState([]);\n  const [categories, setCategories] = useState([]);\n  const [filters, setFilters] = useState({ activeBrands: [], activeCategories: [] });\n  const [loginStatus, setLoginStatus] = useState({ isLoggedIn: false, loginError: false, username: '', userId: '' });\n  const [rents, setRents] = useState([]);\n  const [funziona,setFunziona] = useState(false);\n\n  // Need to start with loading: false to check if user already is logged in\n  const [loading, setLoading] = useState(false);\n\n  // Error message received by an API call\n  const [errorMsg, setErrorMsg] = useState('');\n\n  const handleErrors = (errorObj) => {\n    if (errorObj) {\n      if (errorObj.status && errorObj.status === 401) {\n        // isLoggedIn false redirects to /cars\n        setTimeout(() => {\n          setLoginStatus({ isLoggedIn: false, loginError: false, user: loginStatus.user });\n          setErrorMsg('');\n        }, 2000);\n      }\n      const err0 = errorObj.errors[0];\n      const errorString = err0.param + ': ' + err0.msg;\n      setErrorMsg(errorString);\n      setLoading(false);\n    }\n  };\n\n  const loadInitialData = () => {\n    const promises = [API.getCars(), API.getBrands(), API.getCategories()];\n    Promise.all(promises).then(\n      ([c, b, ca]) => {\n        \n        setCars(c);\n        setBrands(b);\n        setCategories(ca);   \n        setLoading(false); \n      }\n    ).catch(\n      (errorObj) => {\n        handleErrors(errorObj);\n      }\n    );\n  };\n\n  const loadLoggedData = () => {\n    const promise = API.getRents(loginStatus.userId);\n    Promise.resolve(promise).then((rents) => {\n      setRents(rents);\n    }).catch(\n      (errorObj) => {\n        handleErrors(errorObj);\n      }\n    );\n\n  }\n\n\n  // if user is not logged retrieve the public data (default)\n  // if user is logged retrieve the private and public data \n  useEffect(() => {\n    if (loginStatus.isLoggedIn) {\n      API.isAuthenticated().then((userInfo) => {\n        setLoginStatus({ isLoggedIn: true, username: userInfo.name, userId: userInfo.userID, loginError: loginStatus.loginError });\n        loadLoggedData();\n        //if (cars.length === 0 || brands.length === 0 || categories.length === 0)          //se per errore non sono stati caricati i dati iniziali\n        //loadInitialData();\n      }).catch((errorObj) => {\n        if (errorObj.status && errorObj.status === 401) {\n          // setting isLoggedIn to false redirects to /login\n          setLoginStatus({ isLoggedIn: false, loginError: false, username: loginStatus.username, userId: loginStatus.userId });\n          setLoading(false);\n          setErrorMsg('');\n        }\n      })\n    } else {\n      setLoading(true)\n      loadInitialData();\n      \n      console.log(brands)\n     \n    }\n  },[brands,cars,categories] );\n\n  const cancelErrorMsg = () => {\n    setErrorMsg('');\n  }\n\n  // logout method\n  const userLogout = () => {\n    API.userLogout().then(\n      () => { setLoginStatus({ isLoggedIn: false, username: '', userId: '', loginError: loginStatus.loginError }) }\n    );\n  }\n\n  const setLoggedInUser = (user) => {\n    setLoginStatus({ isLoggedIn: true, username: user.name, userId: user.userID, loginError: false });\n    setLoading(true);\n    loadInitialData();\n  }\n\n  const deleteRent = (rent) => {\n    API.deleteRent(rent.invoice).then(() => {\n      API.getRents().then((rents) => setRents(rents))\n    }).catch(\n      (errorObj) => {\n        handleErrors(errorObj);\n      }\n    );\n  }\n\n  const addRent = (rent) => {\n    API.addRent(rent).then(() => {\n      API.getRents().then((rents) => setRents(rents))\n    }).catch(\n      (errorObj) => {\n        handleErrors(errorObj);\n      }\n    );\n  }\n\n\n  return (\n    <Router>\n\n      <Switch>\n        <Route path='/' render={(props) => {\n          if (loginStatus.isLoggedIn)\n            return <Redirect to='/' />  // da reindirizzare alla pagina del configuratore \n          else\n            return <>\n              <Redirect to='/cars' />\n              <Container fluid>\n                <NavBar />\n                \n                <Row className=\"vheight-100\">\n                  <Col sm={4} className=\"below-nav\">\n                    <h5><strong>Public Tasks</strong></h5>\n                    <SideBar activeBrands ={filters.activeBrands} activeCategories ={filters.activeCategories}\n                    brands={brands} categories={categories}/>\n                  </Col>\n                </Row>\n              </Container>\n\n            </>\n        }}>\n\n        </Route>\n      </Switch>\n\n\n    </Router>\n  );\n}\n\n\n*/\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.loadIniatialData = () => {\n      API.getBrands().then(b => {\n        this.setState({\n          brands: b\n        });\n      });\n      API.getCars().then(c => {\n        this.setState({\n          cars: c\n        });\n      });\n      API.getCategories().then(c => {\n        this.setState({\n          categories: c\n        });\n      });\n    };\n\n    this.logout = () => {\n      this.setState({\n        isLogged: true\n      });\n      API.userLogout().then(() => {\n        this.setState({\n          authUser: null,\n          authErr: null,\n          isLogged: false,\n          rents: []\n        });\n        API.getCars().catch(errorObj => {\n          this.handleErrors(errorObj);\n        });\n      });\n      this.setState({\n        isLogged: false\n      });\n    };\n\n    this.login = (username, password) => {\n      this.setState({\n        isLogged: true\n      });\n      API.userLogin(username, password).then(user => {\n        API.getRents().then(rents => {\n          this.setState({\n            rents: rents,\n            authUser: user,\n            authErr: null,\n            isLogged: true\n          });\n          this.props.history.push(\"/cars\"); //=> Rimanda al configuratore\n        }).catch(errorObj => {\n          this.handleErrors(errorObj);\n        });\n      }).catch(errorObj => {\n        const err0 = errorObj.errors[0];\n        this.setState({\n          authErr: err0\n        });\n      });\n      this.setState({\n        isLogged: false\n      });\n    };\n\n    this.state = {\n      brands: [],\n      cars: [],\n      categories: [],\n      rents: [],\n      isLogged: false,\n      loading: false,\n      errorMsg: '',\n      brandsFilters: [],\n      categoriesFilters: []\n    };\n  }\n\n  handleErrors(err) {\n    if (err) {\n      if (err.status && err.status === 401) {\n        this.setState({\n          authErr: err.errorObj\n        });\n        this.props.history.push(\"/cars\");\n      }\n    }\n  } // Add a logout method\n\n\n  componentDidMount() {\n    if (isLogged) {} else {\n      this.setState({\n        loading: true\n      });\n      this.loadIniatialData();\n      this.setState({\n        loading: false\n      });\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, \"Prova\");\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/kali/Desktop/AW1/exam/client/src/App.js"],"names":["React","useState","useEffect","API","BrowserRouter","Router","Route","Switch","Redirect","NavBar","SideBar","AuthContext","Row","Col","Container","App","Component","constructor","props","loadIniatialData","getBrands","then","b","setState","brands","getCars","c","cars","getCategories","categories","logout","isLogged","userLogout","authUser","authErr","rents","catch","errorObj","handleErrors","login","username","password","userLogin","user","getRents","history","push","err0","errors","state","loading","errorMsg","brandsFilters","categoriesFilters","err","status","componentDidMount","render"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport API from './API/API'\n//import {Redirect, Route,Link} from 'react-router-dom';\n//import {Switch} from 'react-router-dom';        //modified before it was react-router\n//import { withRouter } from 'react-router-dom';\nimport { BrowserRouter as Router, Route, Switch, Redirect } from 'react-router-dom';\nimport NavBar from './Components/NavBar'\nimport SideBar from './Components/SideBar'\nimport { AuthContext } from './auth/AuthContext'\nimport { Row, Col, Container } from 'react-bootstrap'\n\n/*\nfunction App(props) {\n  const [cars, setCars] = useState([]);\n  const [brands, setBrands] = useState([]);\n  const [categories, setCategories] = useState([]);\n  const [filters, setFilters] = useState({ activeBrands: [], activeCategories: [] });\n  const [loginStatus, setLoginStatus] = useState({ isLoggedIn: false, loginError: false, username: '', userId: '' });\n  const [rents, setRents] = useState([]);\n  const [funziona,setFunziona] = useState(false);\n\n  // Need to start with loading: false to check if user already is logged in\n  const [loading, setLoading] = useState(false);\n\n  // Error message received by an API call\n  const [errorMsg, setErrorMsg] = useState('');\n\n  const handleErrors = (errorObj) => {\n    if (errorObj) {\n      if (errorObj.status && errorObj.status === 401) {\n        // isLoggedIn false redirects to /cars\n        setTimeout(() => {\n          setLoginStatus({ isLoggedIn: false, loginError: false, user: loginStatus.user });\n          setErrorMsg('');\n        }, 2000);\n      }\n      const err0 = errorObj.errors[0];\n      const errorString = err0.param + ': ' + err0.msg;\n      setErrorMsg(errorString);\n      setLoading(false);\n    }\n  };\n\n  const loadInitialData = () => {\n    const promises = [API.getCars(), API.getBrands(), API.getCategories()];\n    Promise.all(promises).then(\n      ([c, b, ca]) => {\n        \n        setCars(c);\n        setBrands(b);\n        setCategories(ca);   \n        setLoading(false); \n      }\n    ).catch(\n      (errorObj) => {\n        handleErrors(errorObj);\n      }\n    );\n  };\n\n  const loadLoggedData = () => {\n    const promise = API.getRents(loginStatus.userId);\n    Promise.resolve(promise).then((rents) => {\n      setRents(rents);\n    }).catch(\n      (errorObj) => {\n        handleErrors(errorObj);\n      }\n    );\n\n  }\n\n\n  // if user is not logged retrieve the public data (default)\n  // if user is logged retrieve the private and public data \n  useEffect(() => {\n    if (loginStatus.isLoggedIn) {\n      API.isAuthenticated().then((userInfo) => {\n        setLoginStatus({ isLoggedIn: true, username: userInfo.name, userId: userInfo.userID, loginError: loginStatus.loginError });\n        loadLoggedData();\n        //if (cars.length === 0 || brands.length === 0 || categories.length === 0)          //se per errore non sono stati caricati i dati iniziali\n        //loadInitialData();\n      }).catch((errorObj) => {\n        if (errorObj.status && errorObj.status === 401) {\n          // setting isLoggedIn to false redirects to /login\n          setLoginStatus({ isLoggedIn: false, loginError: false, username: loginStatus.username, userId: loginStatus.userId });\n          setLoading(false);\n          setErrorMsg('');\n        }\n      })\n    } else {\n      setLoading(true)\n      loadInitialData();\n      \n      console.log(brands)\n     \n    }\n  },[brands,cars,categories] );\n\n  const cancelErrorMsg = () => {\n    setErrorMsg('');\n  }\n\n  // logout method\n  const userLogout = () => {\n    API.userLogout().then(\n      () => { setLoginStatus({ isLoggedIn: false, username: '', userId: '', loginError: loginStatus.loginError }) }\n    );\n  }\n\n  const setLoggedInUser = (user) => {\n    setLoginStatus({ isLoggedIn: true, username: user.name, userId: user.userID, loginError: false });\n    setLoading(true);\n    loadInitialData();\n  }\n\n  const deleteRent = (rent) => {\n    API.deleteRent(rent.invoice).then(() => {\n      API.getRents().then((rents) => setRents(rents))\n    }).catch(\n      (errorObj) => {\n        handleErrors(errorObj);\n      }\n    );\n  }\n\n  const addRent = (rent) => {\n    API.addRent(rent).then(() => {\n      API.getRents().then((rents) => setRents(rents))\n    }).catch(\n      (errorObj) => {\n        handleErrors(errorObj);\n      }\n    );\n  }\n\n\n  return (\n    <Router>\n\n      <Switch>\n        <Route path='/' render={(props) => {\n          if (loginStatus.isLoggedIn)\n            return <Redirect to='/' />  // da reindirizzare alla pagina del configuratore \n          else\n            return <>\n              <Redirect to='/cars' />\n              <Container fluid>\n                <NavBar />\n                \n                <Row className=\"vheight-100\">\n                  <Col sm={4} className=\"below-nav\">\n                    <h5><strong>Public Tasks</strong></h5>\n                    <SideBar activeBrands ={filters.activeBrands} activeCategories ={filters.activeCategories}\n                    brands={brands} categories={categories}/>\n                  </Col>\n                </Row>\n              </Container>\n\n            </>\n        }}>\n\n        </Route>\n      </Switch>\n\n\n    </Router>\n  );\n}\n\n\n*/\n\nclass App extends React.Component {\n  \n  constructor(props)  {\n    super(props);\n    this.state = {brands: [],cars:[],categories:[],rents:[],isLogged:false,loading:false,errorMsg:'',brandsFilters:[],categoriesFilters:[]};\n  }\n\n  loadIniatialData = () => {\n    API.getBrands().then(\n      (b) => {\n         this.setState({brands:b})\n         \n      })\n      \n      API.getCars().then(\n        (c) => {\n           this.setState({cars:c})\n           \n        })\n      API.getCategories().then(\n        (c) => {\n          this.setState({categories:c})\n        })\n  }\n\n  handleErrors(err) {\n    if (err) {\n        if (err.status && err.status === 401) {\n          this.setState({authErr: err.errorObj});\n          this.props.history.push(\"/cars\");\n        }\n    }\n}\n\n\n// Add a logout method\nlogout = () => {\n  this.setState({isLogged:true})\n  API.userLogout().then(() => {\n    this.setState({authUser: null,authErr: null,isLogged:false,rents:[]});\n    API.getCars().catch((errorObj)=>{this.handleErrors(errorObj)});\n  });\n  this.setState({isLogged:false})\n\n}\n\nlogin = (username, password) => {\n  this.setState({isLogged:true})\n  API.userLogin(username, password).then(\n    (user) => { \n      API.getRents()\n        .then((rents) => {\n          this.setState({rents: rents,authUser: user, authErr: null,isLogged:true});\n          this.props.history.push(\"/cars\"); //=> Rimanda al configuratore\n        })\n        .catch((errorObj) => {\n          this.handleErrors(errorObj);\n      });\n    }\n  ).catch(\n    (errorObj) => {\n      const err0 = errorObj.errors[0];\n      this.setState({authErr: err0});\n    }\n  );\n  this.setState({isLogged:false})\n}\n\n  componentDidMount(){\n   if(isLogged){\n\n   }else{\n     this.setState({loading:true})\n     this.loadIniatialData();\n     this.setState({loading:false});\n   }\n       \n  }\n\n\n  \n  render(){\n    return<>Prova\n</>\n}\n  \n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}