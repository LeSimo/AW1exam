{"ast":null,"code":"const Rent = require('./rent');\n\nconst Car = require('./car');\n\nconst baseURL = '/api';\n\nasync function isAuthenticated() {\n  let url = '/user';\n  const response = await fetch(baseURL + url);\n  const userJson = await response.json();\n  if (response.ok) return userJson;else {\n    let err = {\n      status: response.status,\n      errObj: userJson\n    };\n    throw err; //An object with the error coming from the server \n  }\n}\n\nasync function getCars() {\n  let url = '/cars';\n  const response = await fetch(baseURL + url);\n  const carsJson = await response.json();\n  return carsJson.map(c => new Car(c.id, c.model, c.brand, c.category, c.plate));\n}\n\nasync function getBrands() {\n  let url = '/brands';\n  const response = await fetch(baseURL + url);\n  const brandsJson = await response.json();\n  return brandsJson.map(b => b.brand);\n}\n\nasync function getCategories() {\n  let url = '/categories';\n  const response = await fetch(baseURL + url);\n  const categoriesJson = await response.json();\n  return categoriesJson.map(c => c.category);\n}\n/* Not usefull during development\nasync function getCarById(carId){\n    let url = '/cars/'+carId;\n    const response = await fetch(baseURL+url);\n    const carJson = await response.json();\n    if(response.ok)\n        return carJson;\n}\n*/\n\n\nasync function getRentals(userID) {\n  let url = '/rentals/' + userID;\n  const response = await fetch(baseURL + url);\n  const rentalsJson = await response.json();\n\n  if (response.ok) {\n    return rentalsJson.map(r => new Rent(r.CarId, r.UserId, r.cost, r.StartDate, r.EndDate, r.invoice));\n  }\n}\n\nasync function deleteRent(rentInvoice) {\n  return new Promise((resolve, reject) => {\n    fetch(baseURL + '/rentals/' + rentInvoice, {\n      method: 'DELETE'\n    }).then(response => {\n      if (response.ok) {\n        resolve(null);\n      } else {\n        // analyze the cause of error\n        response.json().then(obj => {\n          reject(obj);\n        }) //error msg in the response body\n        .catch(err => {\n          reject({\n            errors: [{\n              param: \"Server\",\n              msg: \"Cannot parse server response\"\n            }]\n          });\n        });\n      }\n    }).catch(err => {\n      reject({\n        errors: [{\n          param: \"Server\",\n          msg: \"Cannot communicate\"\n        }]\n      });\n    });\n  });\n}\n\nasync function addRent(rent) {\n  return new Promise((resolve, reject) => {\n    fetch(baseURL + '/rentals', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(rent)\n    }).then(response => {\n      if (response.ok) {\n        resolve(null);\n      } else {\n        //analyze the cause of error\n        response.json().then(obj => {\n          reject(obj);\n        }) //error message in the response body\n        .catch(err => {\n          reject({\n            errors: [{\n              param: \"Application\",\n              masg: \"Cannot parse server response\"\n            }]\n          });\n        });\n      }\n    }).catch(err => {\n      reject({\n        errors: [{\n          param: \"Server\",\n          msg: \"Cannot communicate\"\n        }]\n      });\n    });\n  });\n}\n\nasync function userLogin(username, password) {\n  return new Promise((resolve, reject) => {\n    fetch(baseURL + '/login', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        username: username,\n        password: password\n      })\n    }).then(response => {\n      if (response.ok) {\n        response.json().then(user => {\n          resolve(user);\n        });\n      } else {\n        //analyze the cause of error\n        response.json().then(obj => {\n          reject(obj);\n        }) //error message in the response body\n        .catch(err => {\n          reject({\n            errors: [{\n              param: \"Application\",\n              masg: \"Cannot parse server response\"\n            }]\n          });\n        });\n      }\n    }).catch(err => {\n      reject({\n        errors: [{\n          param: \"Server\",\n          msg: \"Cannot communicate\"\n        }]\n      });\n    });\n  });\n}\n\nasync function userLogout() {\n  return new Promise((resolve, reject) => {\n    fetch(baseURL + '/logout', {\n      method: 'POST'\n    }).then(response => {\n      if (response.ok) {\n        resolve(null);\n      } else {\n        //analyze the cause of error\n        response.json().then(obj => {\n          reject(obj);\n        }) //error message in the response body\n        .catch(err => {\n          reject({\n            errors: [{\n              param: \"Application\",\n              masg: \"Cannot parse server response\"\n            }]\n          });\n        });\n      }\n    });\n  });\n}\n\nasync function availableCars(StartDate, EndDate) {\n  return new Promise((resolve, reject) => {\n    fetch(baseURL + '/available', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        StartDate: StartDate,\n        EndDate: EndDate\n      })\n    }).then(response => {\n      if (response.ok) {\n        response.json().then(carsId => {\n          resolve(carsId);\n        });\n      } else {\n        response.json().then(obj => {\n          reject(obj);\n        }) //error message in the response body\n        .catch(err => {\n          reject({\n            errors: [{\n              param: \"Application\",\n              masg: \"Cannot parse server response\"\n            }]\n          });\n        });\n      }\n    }).catch(err => {\n      reject({\n        errors: [{\n          param: \"Server\",\n          msg: \"Cannot communicate\"\n        }]\n      });\n    });\n  });\n}\n\nasync function stub(card, cost) {\n  return new Promise((resolve, reject) => {\n    fetch(baseURL + '/stub', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        name: card.name,\n        cc: card.cc,\n        cvv: card.cvv,\n        cost: cost\n      })\n    }).then(response => {\n      if (response.ok) {\n        response.json().then(obj => {\n          resolve(obj);\n        });\n      } else {\n        response.json().then(obj => {\n          reject(obj);\n        }) //error message in the response body\n        .catch(err => {\n          reject({\n            errors: [{\n              param: \"Application\",\n              masg: \"Cannot parse server response\"\n            }]\n          });\n        });\n      }\n    }).catch(err => {\n      reject({\n        errors: [{\n          param: \"Server\",\n          msg: \"Cannot communicate\"\n        }]\n      });\n    });\n  });\n} //API to export\n\n\nconst API = {\n  isAuthenticated,\n  getBrands,\n  getCars,\n  getCategories,\n  getRentals,\n  addRent,\n  deleteRent,\n  userLogin,\n  userLogout,\n  availableCars,\n  stub\n};\nexport default API;","map":{"version":3,"sources":["/home/kali/Desktop/AW1/exam/client/src/API/API.js"],"names":["Rent","require","Car","baseURL","isAuthenticated","url","response","fetch","userJson","json","ok","err","status","errObj","getCars","carsJson","map","c","id","model","brand","category","plate","getBrands","brandsJson","b","getCategories","categoriesJson","getRentals","userID","rentalsJson","r","CarId","UserId","cost","StartDate","EndDate","invoice","deleteRent","rentInvoice","Promise","resolve","reject","method","then","obj","catch","errors","param","msg","addRent","rent","headers","body","JSON","stringify","masg","userLogin","username","password","user","userLogout","availableCars","carsId","stub","card","name","cc","cvv","API"],"mappings":"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","sourcesContent":["\nconst Rent = require('./rent')\nconst Car = require('./car')\nconst baseURL = '/api';\n\n\n\nasync function isAuthenticated() {\n    let url = '/user';\n    const response = await fetch(baseURL + url);\n    const userJson = await response.json();\n    if (response.ok)\n        return userJson;\n    else {\n        let err = { status: response.status, errObj: userJson };\n        throw err;      //An object with the error coming from the server \n    }\n}\n\nasync function getCars() {\n    let url = '/cars';\n    const response = await fetch(baseURL + url);\n    const carsJson = await response.json();\n    return carsJson.map((c) => new Car(c.id, c.model, c.brand, c.category, c.plate));\n\n}\n\nasync function getBrands() {\n    let url = '/brands';\n    const response = await fetch(baseURL + url);\n    const brandsJson = await response.json();\n    return brandsJson.map((b) => b.brand)\n\n}\n\n\nasync function getCategories() {\n    let url = '/categories';\n    const response = await fetch(baseURL + url);\n    const categoriesJson = await response.json();\n    return categoriesJson.map((c) => c.category);\n\n}\n\n/* Not usefull during development\nasync function getCarById(carId){\n    let url = '/cars/'+carId;\n    const response = await fetch(baseURL+url);\n    const carJson = await response.json();\n    if(response.ok)\n        return carJson;\n}\n*/\n\nasync function getRentals(userID) {\n    let url = '/rentals/' + userID;\n    const response = await fetch(baseURL + url);\n    const rentalsJson = await response.json();\n    if (response.ok) {\n        return rentalsJson.map((r) => new Rent(r.CarId, r.UserId, r.cost, r.StartDate, r.EndDate, r.invoice));\n    }\n}\n\nasync function deleteRent(rentInvoice) {\n    return new Promise((resolve, reject) => {\n        fetch(baseURL + '/rentals/' + rentInvoice, {\n            method: 'DELETE'\n        }).then((response) => {\n            if (response.ok) {\n                resolve(null);\n            } else {\n                // analyze the cause of error\n                response.json()\n                    .then((obj) => { reject(obj) })  //error msg in the response body\n                    .catch((err) => { reject({ errors: [{ param: \"Server\", msg: \"Cannot parse server response\" }] }) });\n            }\n        }).catch((err) => { reject({ errors: [{ param: \"Server\", msg: \"Cannot communicate\" }] }) });\n    })\n}\n\n\nasync function addRent(rent) {\n    return new Promise((resolve, reject) => {\n        fetch(baseURL + '/rentals', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(rent)\n        }).then((response) => {\n            if (response.ok) {\n                resolve(null);\n            } else {\n                //analyze the cause of error\n                response.json()\n                    .then((obj) => { reject(obj) })       //error message in the response body\n                    .catch((err) => { reject({ errors: [{ param: \"Application\", masg: \"Cannot parse server response\" }] }) });\n            }\n        }).catch((err) => { reject({ errors: [{ param: \"Server\", msg: \"Cannot communicate\" }] }) });\n    })\n}\n\n\nasync function userLogin(username, password) {\n    return new Promise((resolve, reject) => {\n        fetch(baseURL + '/login', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({ username: username, password: password }),\n        }).then((response) => {\n            if (response.ok) {\n                response.json().then((user) => {\n                    resolve(user);\n                });\n            } else {\n                //analyze the cause of error\n                response.json()\n                    .then((obj) => { reject(obj) })       //error message in the response body\n                    .catch((err) => { reject({ errors: [{ param: \"Application\", masg: \"Cannot parse server response\" }] }) });\n            }\n        }).catch((err) => { reject({ errors: [{ param: \"Server\", msg: \"Cannot communicate\" }] }) });\n    })\n}\n\n\nasync function userLogout() {\n    return new Promise((resolve, reject) => {\n        fetch(baseURL + '/logout', {\n            method: 'POST',\n        }).then((response) => {\n            if (response.ok) {\n                resolve(null);\n            } else {\n                //analyze the cause of error\n                response.json()\n                    .then((obj) => { reject(obj) })       //error message in the response body\n                    .catch((err) => { reject({ errors: [{ param: \"Application\", masg: \"Cannot parse server response\" }] }) });\n            }\n        })\n    })\n}\n\n\nasync function availableCars(StartDate, EndDate) {\n    return new Promise((resolve, reject) => {\n        fetch(baseURL + '/available', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({ StartDate: StartDate, EndDate: EndDate }),\n        }).then((response) => {\n            if (response.ok) {\n                response.json().then((carsId) => {\n                    resolve(carsId)\n                })\n            } else {\n                response.json()\n                    .then((obj) => { reject(obj) })       //error message in the response body\n                    .catch((err) => { reject({ errors: [{ param: \"Application\", masg: \"Cannot parse server response\" }] }) });\n            }\n        }).catch((err) => { reject({ errors: [{ param: \"Server\", msg: \"Cannot communicate\" }] }) });\n    })\n}\n\nasync function stub(card, cost) {\n    return new Promise((resolve, reject) => {\n        fetch(baseURL + '/stub', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({ name: card.name, cc: card.cc, cvv: card.cvv, cost: cost }),\n        }).then((response) => {\n            if (response.ok) {\n                response.json().then((obj) => {\n                    resolve(obj)\n                })\n            } else {\n                response.json()\n                    .then((obj) => { reject(obj) })       //error message in the response body\n                    .catch((err) => { reject({ errors: [{ param: \"Application\", masg: \"Cannot parse server response\" }] }) });\n            }\n        }).catch((err) => { reject({ errors: [{ param: \"Server\", msg: \"Cannot communicate\" }] }) });\n    })\n}\n\n//API to export\nconst API = { isAuthenticated, getBrands, getCars, getCategories, getRentals, addRent, deleteRent, userLogin, userLogout, availableCars, stub };\nexport default API;"]},"metadata":{},"sourceType":"module"}