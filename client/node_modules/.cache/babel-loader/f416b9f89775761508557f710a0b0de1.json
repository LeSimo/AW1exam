{"ast":null,"code":"var _jsxFileName = \"/home/kali/Desktop/AW1/exam/client/src/App.js\";\nimport React, { useState, useEffect } from 'react';\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport API from './API/API'; //import {Redirect, Route,Link} from 'react-router-dom';\n//import {Switch} from 'react-router-dom';        //modified before it was react-router\n//import { withRouter } from 'react-router-dom';\n\nimport { BrowserRouter as Router, Route, Switch, Redirect } from 'react-router-dom';\nimport NavBar from './Components/NavBar';\nimport SideBar from './Components/SideBar';\nimport CarList from './Components/CarList';\nimport LoginForm from './Components/LoginForm';\nimport RentsList from './Components/RentsList';\nimport { AuthContext } from './auth/AuthContext';\nimport { Row, Col, Container, Navbar } from 'react-bootstrap';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.loadIniatialData = () => {\n      API.getBrands().then(b => {\n        this.setState({\n          brands: b\n        });\n      });\n      API.getCars().then(c => {\n        this.setState({\n          cars: c\n        });\n      });\n      API.getCategories().then(c => {\n        this.setState({\n          categories: c\n        });\n      });\n    };\n\n    this.logout = () => {\n      this.setState({\n        isLogged: false\n      });\n      API.userLogout().then(() => {\n        this.setState({\n          authUser: null,\n          authErr: null,\n          isLogged: false,\n          rents: []\n        });\n        API.getCars().catch(errorObj => {\n          this.handleErrors(errorObj);\n        });\n      }); //this.setState({ isLogged: false })\n    };\n\n    this.login = (username, password) => {\n      API.userLogin(username, password).then(user => {\n        this.setState({\n          isLogged: true,\n          authUser: user\n        });\n        API.getRents(this.state.authUser.userID).then(rents => {\n          this.setState({\n            rents: rents,\n            authErr: null\n          }); //this.props.history.push(\"/\"); //=> DA ELIMINARE\n        }).catch(errorObj => {\n          this.handleErrors(errorObj);\n        });\n      }).catch(errorObj => {\n        const err0 = errorObj.errors[0];\n        this.setState({\n          authErr: err0\n        });\n        this.props.history.push(\"/configurator\");\n      });\n    };\n\n    this.deleteRent = invoice => {\n      API.deleteRent(invoice).then(() => {\n        API.getRents(this.state.authUser.userID).then(rents => {\n          this.setState({\n            rents: rents,\n            authErr: null\n          });\n        });\n      }).catch(errorObj => {\n        this.handleErrors(errorObj);\n      });\n    };\n\n    this.addOrRemoveBrandsFilters = brand => {\n      let brandsFilters = this.state.brandsFilters;\n\n      if (brandsFilters.includes(brand)) {\n        brandsFilters = brandsFilters.filter(b => b !== brand);\n      } else {\n        brandsFilters.push(brand);\n      }\n\n      this.setState({\n        brandsFilters: brandsFilters\n      });\n    };\n\n    this.addOrRemoveCategoriesFilters = category => {\n      let categoriesFilters = this.state.categoriesFilters;\n\n      if (categoriesFilters.includes(category)) {\n        categoriesFilters = categoriesFilters.filter(c => c !== category);\n      } else {\n        categoriesFilters.push(category);\n      }\n\n      this.setState({\n        categoriesFilters: categoriesFilters\n      });\n    };\n\n    this.state = {\n      brands: [],\n      cars: [],\n      categories: [],\n      rents: [],\n      isLogged: false,\n      loading: false,\n      errorMsg: '',\n      brandsFilters: [],\n      categoriesFilters: [],\n      authUser: '',\n      authErr: ''\n    };\n  }\n\n  handleErrors(err) {\n    if (err) {\n      if (err.status && err.status === 401) {\n        this.setState({\n          authErr: err.errorObj\n        });\n        this.props.history.push(\"/cars\");\n      }\n    }\n  } // Add a logout method\n\n\n  componentDidMount() {\n    this.setState({\n      loading: true\n    });\n    this.loadIniatialData();\n    this.setState({\n      loading: false\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Router, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(NavBar, {\n      isLogged: this.state.isLogged,\n      authUser: this.state.authUser,\n      logoutMethod: this.logout,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Switch, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Route, {\n      path: \"/cars\",\n      render: props => {\n        if (this.state.isLogged) return /*#__PURE__*/React.createElement(Redirect, {\n          to: \"/configurator\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 22\n          }\n        });else {\n          return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Container, {\n            fluid: true,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 150,\n              columnNumber: 17\n            }\n          }, /*#__PURE__*/React.createElement(Row, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 151,\n              columnNumber: 19\n            }\n          }, /*#__PURE__*/React.createElement(SideBar, {\n            brands: this.state.brands,\n            categories: this.state.categories,\n            brandsFilters: this.state.brandsFilters,\n            categoriesFilters: this.state.categoriesFilters,\n            addOrRemoveBrandsFilters: this.addOrRemoveBrandsFilters,\n            addOrRemoveCategoriesFilters: this.addOrRemoveCategoriesFilters,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 152,\n              columnNumber: 21\n            }\n          }), /*#__PURE__*/React.createElement(CarList, {\n            cars: this.state.cars,\n            brandsFilters: this.state.brandsFilters,\n            categoriesFilters: this.state.categoriesFilters,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 155,\n              columnNumber: 21\n            }\n          }))));\n        }\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: \"/login\",\n      render: props => {\n        return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n          className: \"vheight-100\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 15\n          }\n        }, /*#__PURE__*/React.createElement(Col, {\n          md: 4,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 17\n          }\n        }), /*#__PURE__*/React.createElement(Col, {\n          md: 4,\n          className: \"below-nav\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 17\n          }\n        }, /*#__PURE__*/React.createElement(LoginForm, {\n          loginMethod: this.login,\n          authErr: this.state.authErr,\n          isLogged: this.state.isLogged,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 19\n          }\n        }))));\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: \"/rents\",\n      render: props => {\n        if (!this.state.isLogged) {\n          return /*#__PURE__*/React.createElement(Redirect, {\n            to: \"/cars\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 178,\n              columnNumber: 22\n            }\n          });\n        } else {\n          return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Container, {\n            fluid: true,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 181,\n              columnNumber: 17\n            }\n          }, /*#__PURE__*/React.createElement(Row, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 182,\n              columnNumber: 19\n            }\n          }, /*#__PURE__*/React.createElement(RentsList, {\n            rents: this.state.rents,\n            deleteRent: this.deleteRent,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 183,\n              columnNumber: 21\n            }\n          }))));\n        }\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: \"/configurator\",\n      render: props => {\n        return /*#__PURE__*/React.createElement(React.Fragment, null, \"Qui ci va il form di configurazione\");\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: \"/\",\n      render: props => {\n        if (this.state.isLogged) return /*#__PURE__*/React.createElement(Redirect, {\n          to: \"/configurator\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 203,\n            columnNumber: 22\n          }\n        });else {\n          return /*#__PURE__*/React.createElement(Redirect, {\n            to: \"/cars\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 205,\n              columnNumber: 22\n            }\n          });\n        }\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 11\n      }\n    }))));\n  }\n\n}\n\nexport default App;\n/*\nfunction App(props) {\n  const [cars, setCars] = useState([]);\n  const [brands, setBrands] = useState([]);\n  const [categories, setCategories] = useState([]);\n  const [filters, setFilters] = useState({ activeBrands: [], activeCategories: [] });\n  const [loginStatus, setLoginStatus] = useState({ isLoggedIn: false, loginError: false, username: '', userId: '' });\n  const [rents, setRents] = useState([]);\n  const [funziona,setFunziona] = useState(false);\n\n  // Need to start with loading: false to check if user already is logged in\n  const [loading, setLoading] = useState(false);\n\n  // Error message received by an API call\n  const [errorMsg, setErrorMsg] = useState('');\n\n  const handleErrors = (errorObj) => {\n    if (errorObj) {\n      if (errorObj.status && errorObj.status === 401) {\n        // isLoggedIn false redirects to /cars\n        setTimeout(() => {\n          setLoginStatus({ isLoggedIn: false, loginError: false, user: loginStatus.user });\n          setErrorMsg('');\n        }, 2000);\n      }\n      const err0 = errorObj.errors[0];\n      const errorString = err0.param + ': ' + err0.msg;\n      setErrorMsg(errorString);\n      setLoading(false);\n    }\n  };\n\n  const loadInitialData = () => {\n    const promises = [API.getCars(), API.getBrands(), API.getCategories()];\n    Promise.all(promises).then(\n      ([c, b, ca]) => {\n\n        setCars(c);\n        setBrands(b);\n        setCategories(ca);\n        setLoading(false);\n      }\n    ).catch(\n      (errorObj) => {\n        handleErrors(errorObj);\n      }\n    );\n  };\n\n  const loadLoggedData = () => {\n    const promise = API.getRents(loginStatus.userId);\n    Promise.resolve(promise).then((rents) => {\n      setRents(rents);\n    }).catch(\n      (errorObj) => {\n        handleErrors(errorObj);\n      }\n    );\n\n  }\n\n\n  // if user is not logged retrieve the public data (default)\n  // if user is logged retrieve the private and public data\n  useEffect(() => {\n    if (loginStatus.isLoggedIn) {\n      API.isAuthenticated().then((userInfo) => {\n        setLoginStatus({ isLoggedIn: true, username: userInfo.name, userId: userInfo.userID, loginError: loginStatus.loginError });\n        loadLoggedData();\n        //if (cars.length === 0 || brands.length === 0 || categories.length === 0)          //se per errore non sono stati caricati i dati iniziali\n        //loadInitialData();\n      }).catch((errorObj) => {\n        if (errorObj.status && errorObj.status === 401) {\n          // setting isLoggedIn to false redirects to /login\n          setLoginStatus({ isLoggedIn: false, loginError: false, username: loginStatus.username, userId: loginStatus.userId });\n          setLoading(false);\n          setErrorMsg('');\n        }\n      })\n    } else {\n      setLoading(true)\n      loadInitialData();\n\n      console.log(brands)\n\n    }\n  },[brands,cars,categories] );\n\n  const cancelErrorMsg = () => {\n    setErrorMsg('');\n  }\n\n  // logout method\n  const userLogout = () => {\n    API.userLogout().then(\n      () => { setLoginStatus({ isLoggedIn: false, username: '', userId: '', loginError: loginStatus.loginError }) }\n    );\n  }\n\n  const setLoggedInUser = (user) => {\n    setLoginStatus({ isLoggedIn: true, username: user.name, userId: user.userID, loginError: false });\n    setLoading(true);\n    loadInitialData();\n  }\n\n  const deleteRent = (rent) => {\n    API.deleteRent(rent.invoice).then(() => {\n      API.getRents().then((rents) => setRents(rents))\n    }).catch(\n      (errorObj) => {\n        handleErrors(errorObj);\n      }\n    );\n  }\n\n  const addRent = (rent) => {\n    API.addRent(rent).then(() => {\n      API.getRents().then((rents) => setRents(rents))\n    }).catch(\n      (errorObj) => {\n        handleErrors(errorObj);\n      }\n    );\n  }\n\n\n  return (\n    <Router>\n\n      <Switch>\n        <Route path='/' render={(props) => {\n          if (loginStatus.isLoggedIn)\n            return <Redirect to='/' />  // da reindirizzare alla pagina del configuratore\n          else\n            return <>\n              <Redirect to='/cars' />\n              <Container fluid>\n                <NavBar />\n\n                <Row className=\"vheight-100\">\n                  <Col sm={4} className=\"below-nav\">\n                    <h5><strong>Public Tasks</strong></h5>\n                    <SideBar activeBrands ={filters.activeBrands} activeCategories ={filters.activeCategories}\n                    brands={brands} categories={categories}/>\n                  </Col>\n                </Row>\n              </Container>\n\n            </>\n        }}>\n\n        </Route>\n      </Switch>\n\n\n    </Router>\n  );\n}\n\n\n*/","map":{"version":3,"sources":["/home/kali/Desktop/AW1/exam/client/src/App.js"],"names":["React","useState","useEffect","API","BrowserRouter","Router","Route","Switch","Redirect","NavBar","SideBar","CarList","LoginForm","RentsList","AuthContext","Row","Col","Container","Navbar","App","Component","constructor","props","loadIniatialData","getBrands","then","b","setState","brands","getCars","c","cars","getCategories","categories","logout","isLogged","userLogout","authUser","authErr","rents","catch","errorObj","handleErrors","login","username","password","userLogin","user","getRents","state","userID","err0","errors","history","push","deleteRent","invoice","addOrRemoveBrandsFilters","brand","brandsFilters","includes","filter","addOrRemoveCategoriesFilters","category","categoriesFilters","loading","errorMsg","err","status","componentDidMount","render"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport API from './API/API'\n//import {Redirect, Route,Link} from 'react-router-dom';\n//import {Switch} from 'react-router-dom';        //modified before it was react-router\n//import { withRouter } from 'react-router-dom';\nimport { BrowserRouter as Router, Route, Switch, Redirect } from 'react-router-dom';\nimport NavBar from './Components/NavBar'\nimport SideBar from './Components/SideBar'\nimport CarList from './Components/CarList'\nimport LoginForm from './Components/LoginForm'\nimport RentsList from './Components/RentsList'\nimport { AuthContext } from './auth/AuthContext'\nimport { Row, Col, Container, Navbar } from 'react-bootstrap'\n\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      brands: [], cars: [], categories: [], rents: [], isLogged: false,\n      loading: false, errorMsg: '', brandsFilters: [], categoriesFilters: [],\n      authUser: '', authErr: ''\n    };\n  }\n\n  loadIniatialData = () => {\n    API.getBrands().then(\n      (b) => {\n        this.setState({ brands: b })\n\n      })\n\n    API.getCars().then(\n      (c) => {\n        this.setState({ cars: c })\n\n      })\n    API.getCategories().then(\n      (c) => {\n        this.setState({ categories: c })\n      })\n  }\n\n  handleErrors(err) {\n    if (err) {\n      if (err.status && err.status === 401) {\n        this.setState({ authErr: err.errorObj });\n        this.props.history.push(\"/cars\");\n      }\n    }\n  }\n\n\n  // Add a logout method\n  logout = () => {\n    this.setState({ isLogged: false })\n    API.userLogout().then(() => {\n      this.setState({ authUser: null, authErr: null, isLogged: false, rents: [] });\n      API.getCars().catch((errorObj) => { this.handleErrors(errorObj) });\n    });\n    //this.setState({ isLogged: false })\n\n  }\n\n\n  // Login method\n  login = (username, password) => {\n    API.userLogin(username, password).then(\n      (user) => {\n        this.setState({ isLogged: true, authUser: user })\n        API.getRents(this.state.authUser.userID)\n          .then((rents) => {\n            this.setState({ rents: rents, authErr: null });\n            //this.props.history.push(\"/\"); //=> DA ELIMINARE\n          })\n          .catch((errorObj) => {\n            this.handleErrors(errorObj);\n\n          });\n      }\n    ).catch(\n      (errorObj) => {\n        const err0 = errorObj.errors[0];\n        this.setState({ authErr: err0 });\n        this.props.history.push(\"/configurator\")\n      }\n    );\n\n  }\n\n\n  deleteRent = (invoice) => {\n    API.deleteRent(invoice).then(() => {\n      API.getRents(this.state.authUser.userID)\n        .then((rents) => {\n          this.setState({ rents: rents, authErr: null });\n        })\n    }).catch((errorObj) => {\n      this.handleErrors(errorObj)\n    })\n  }\n\n  componentDidMount() {\n    this.setState({ loading: true })\n    this.loadIniatialData();\n    this.setState({ loading: false });\n  }\n\n  addOrRemoveBrandsFilters = (brand) => {\n    let brandsFilters = this.state.brandsFilters;\n    if (brandsFilters.includes(brand)) {\n      brandsFilters = brandsFilters.filter((b) => b !== brand)\n    }\n    else {\n      brandsFilters.push(brand);\n    }\n    this.setState({ brandsFilters: brandsFilters })\n  }\n\n  addOrRemoveCategoriesFilters = (category) => {\n    let categoriesFilters = this.state.categoriesFilters;\n    if (categoriesFilters.includes(category)) {\n      categoriesFilters = categoriesFilters.filter((c) => c !== category)\n    }\n    else {\n      categoriesFilters.push(category);\n    }\n    this.setState({ categoriesFilters: categoriesFilters })\n  }\n\n\n\n\n  render() {\n    return <>\n      <Router>\n        <NavBar isLogged={this.state.isLogged} authUser={this.state.authUser}\n          logoutMethod={this.logout} />\n\n        <Switch>\n          <Route path='/cars' render={(props) => {\n            if (this.state.isLogged)\n              return <Redirect to='/configurator' />;\n            else {\n              return <>\n\n                <Container fluid>\n                  <Row>\n                    <SideBar brands={this.state.brands} categories={this.state.categories}\n                      brandsFilters={this.state.brandsFilters} categoriesFilters={this.state.categoriesFilters}\n                      addOrRemoveBrandsFilters={this.addOrRemoveBrandsFilters} addOrRemoveCategoriesFilters={this.addOrRemoveCategoriesFilters} />\n                    <CarList cars={this.state.cars} brandsFilters={this.state.brandsFilters} categoriesFilters={this.state.categoriesFilters} />\n                  </Row>\n                </Container>\n              </>\n\n            }\n          }} />\n\n          <Route path='/login' render={(props) => {\n            return <>\n              <Row className=\"vheight-100\">\n                <Col md={4}></Col>\n                <Col md={4} className=\"below-nav\">\n                  <LoginForm loginMethod={this.login} authErr={this.state.authErr} isLogged={this.state.isLogged} />\n                </Col>\n              </Row>\n            </>\n\n          }}>\n          </Route>\n\n          <Route path=\"/rents\" render={(props) => {\n            if (!this.state.isLogged) {\n              return <Redirect to=\"/cars\" />\n            } else {\n              return <>\n                <Container fluid>\n                  <Row>\n                    <RentsList rents={this.state.rents} deleteRent={this.deleteRent} />\n                  </Row>\n                </Container>\n              </>\n            }\n          }}>\n\n          </Route>\n\n\n          <Route path='/configurator' render={(props) => {\n            return <>\n              Qui ci va il form di configurazione\n            </>\n          }} />\n\n\n\n          <Route path='/' render={(props) => {\n            if (this.state.isLogged)\n              return <Redirect to='/configurator' />;\n            else {\n              return <Redirect to='/cars' />\n            }\n          }}>\n          </Route>\n\n\n        </Switch>\n\n\n      </Router>\n\n    </>\n  }\n\n}\n\nexport default App;\n\n\n\n/*\nfunction App(props) {\n  const [cars, setCars] = useState([]);\n  const [brands, setBrands] = useState([]);\n  const [categories, setCategories] = useState([]);\n  const [filters, setFilters] = useState({ activeBrands: [], activeCategories: [] });\n  const [loginStatus, setLoginStatus] = useState({ isLoggedIn: false, loginError: false, username: '', userId: '' });\n  const [rents, setRents] = useState([]);\n  const [funziona,setFunziona] = useState(false);\n\n  // Need to start with loading: false to check if user already is logged in\n  const [loading, setLoading] = useState(false);\n\n  // Error message received by an API call\n  const [errorMsg, setErrorMsg] = useState('');\n\n  const handleErrors = (errorObj) => {\n    if (errorObj) {\n      if (errorObj.status && errorObj.status === 401) {\n        // isLoggedIn false redirects to /cars\n        setTimeout(() => {\n          setLoginStatus({ isLoggedIn: false, loginError: false, user: loginStatus.user });\n          setErrorMsg('');\n        }, 2000);\n      }\n      const err0 = errorObj.errors[0];\n      const errorString = err0.param + ': ' + err0.msg;\n      setErrorMsg(errorString);\n      setLoading(false);\n    }\n  };\n\n  const loadInitialData = () => {\n    const promises = [API.getCars(), API.getBrands(), API.getCategories()];\n    Promise.all(promises).then(\n      ([c, b, ca]) => {\n\n        setCars(c);\n        setBrands(b);\n        setCategories(ca);\n        setLoading(false);\n      }\n    ).catch(\n      (errorObj) => {\n        handleErrors(errorObj);\n      }\n    );\n  };\n\n  const loadLoggedData = () => {\n    const promise = API.getRents(loginStatus.userId);\n    Promise.resolve(promise).then((rents) => {\n      setRents(rents);\n    }).catch(\n      (errorObj) => {\n        handleErrors(errorObj);\n      }\n    );\n\n  }\n\n\n  // if user is not logged retrieve the public data (default)\n  // if user is logged retrieve the private and public data\n  useEffect(() => {\n    if (loginStatus.isLoggedIn) {\n      API.isAuthenticated().then((userInfo) => {\n        setLoginStatus({ isLoggedIn: true, username: userInfo.name, userId: userInfo.userID, loginError: loginStatus.loginError });\n        loadLoggedData();\n        //if (cars.length === 0 || brands.length === 0 || categories.length === 0)          //se per errore non sono stati caricati i dati iniziali\n        //loadInitialData();\n      }).catch((errorObj) => {\n        if (errorObj.status && errorObj.status === 401) {\n          // setting isLoggedIn to false redirects to /login\n          setLoginStatus({ isLoggedIn: false, loginError: false, username: loginStatus.username, userId: loginStatus.userId });\n          setLoading(false);\n          setErrorMsg('');\n        }\n      })\n    } else {\n      setLoading(true)\n      loadInitialData();\n\n      console.log(brands)\n\n    }\n  },[brands,cars,categories] );\n\n  const cancelErrorMsg = () => {\n    setErrorMsg('');\n  }\n\n  // logout method\n  const userLogout = () => {\n    API.userLogout().then(\n      () => { setLoginStatus({ isLoggedIn: false, username: '', userId: '', loginError: loginStatus.loginError }) }\n    );\n  }\n\n  const setLoggedInUser = (user) => {\n    setLoginStatus({ isLoggedIn: true, username: user.name, userId: user.userID, loginError: false });\n    setLoading(true);\n    loadInitialData();\n  }\n\n  const deleteRent = (rent) => {\n    API.deleteRent(rent.invoice).then(() => {\n      API.getRents().then((rents) => setRents(rents))\n    }).catch(\n      (errorObj) => {\n        handleErrors(errorObj);\n      }\n    );\n  }\n\n  const addRent = (rent) => {\n    API.addRent(rent).then(() => {\n      API.getRents().then((rents) => setRents(rents))\n    }).catch(\n      (errorObj) => {\n        handleErrors(errorObj);\n      }\n    );\n  }\n\n\n  return (\n    <Router>\n\n      <Switch>\n        <Route path='/' render={(props) => {\n          if (loginStatus.isLoggedIn)\n            return <Redirect to='/' />  // da reindirizzare alla pagina del configuratore\n          else\n            return <>\n              <Redirect to='/cars' />\n              <Container fluid>\n                <NavBar />\n\n                <Row className=\"vheight-100\">\n                  <Col sm={4} className=\"below-nav\">\n                    <h5><strong>Public Tasks</strong></h5>\n                    <SideBar activeBrands ={filters.activeBrands} activeCategories ={filters.activeCategories}\n                    brands={brands} categories={categories}/>\n                  </Col>\n                </Row>\n              </Container>\n\n            </>\n        }}>\n\n        </Route>\n      </Switch>\n\n\n    </Router>\n  );\n}\n\n\n*/"]},"metadata":{},"sourceType":"module"}